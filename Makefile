# Each package must have a makefile with the name <package_name>.mk which
# defines the following goals:
# <package_name>: builds the package.
# <package_name>-test: builds the unit tests for the package.
# <package_name>-clean: removes object files generated by package.
PACKAGES = hello

# These variables are used by packages when they build their targets. Note that
# these variables may be modified based on the variables `target` and `mode`
# that are set on the command line.
#
# BUILD_DIR: directory to place object files. relative to *package* directory.
# BUILDROOT_DIR: directory containing buildroot files. placed in a directory in
#                home because Linux cannot build in a shared directory.
# OVERLAY_DIR: directory containing the root filesystem overlay.
# CFLAGS: flags to use with C compiler.
# RELEASE_CFLAGS: additional flags to use with C compiler in release mode.
# DEBUG_CFLAGS: additional flags to use with C compiler in debug mode.
# COVERAGE_FLAGS: flags to create test coverage files.
# LD_FLAGS: flags to use by the linker.
# TEST_FLAGS: flags to use when building unit tests.
# TEST_LD_FLAGS: flags to use by linker for unit tests.
export BUILD_DIR = build
BUILDROOT_DIR = $(shell echo ~)/buildroot
export OVERLAY_DIR = ext-tree/board
export CFLAGS = -std=c99 -Wall -Wextra -pedantic -Werror
RELEASE_CFLAGS = -O2 -s -DNDEBUG
DEBUG_CFLAGS = -g
COVERAGE_CFLAGS = -fprofile-arcs -ftest-coverage
export LD_FLAGS =
export TEST_FLAGS = -std=c++11 -g
export TEST_LD_FLAGS = -lgtest -lgtest_main -pthread -lgcov --coverage

# Check if the `target` variable was set on the command line. If not, local
# machine becomes the target by default. If target is invalid, throw an error
# no matter what. Presently the supported values for target are `arietta` and
# `arietta-wifi`.
#
# The following variables are modified or created based on the target:
# BUILD_DIR: modified based on target.
# CC: path to C compiler.
# CXX: path to C++ compiler.
# BUILD_DIR: modified based on target.
# BUILDROOT_DIR: modified based on target.
# OVERLAY_DIR: modified based on target.
ifndef target
    export CC = gcc
    export CXX = g++
else
ifeq ($(target), $(filter $(target), arietta arietta-wifi))
    BUILD_DIR := $(BUILD_DIR)/$(target)
    BUILDROOT_DIR := $(BUILDROOT_DIR)/$(target)
    CC = arm-none-linux-gnueabi-gcc
    OVERLAY_DIR := $(OVERLAY_DIR)/$(target)/overlay

    # Prepend directory containing compiler to PATH.
    export PATH := $(BUILDROOT_DIR)/output/host/usr/bin:$(PATH)
else
ifeq ($(filter $(MAKECMDGOALS), clean clean-tree),)
    $(error target must be specified)
endif
endif
endif

# Check if the mode variable was set on the command line. If not, throw an error
# unless a goal that does not require a mode was called. If mode is invalid,
# throw an error no matter what.
#
# The following variables are modified based on the release mode:
# BUILD_DIR
# CFLAGS
ifeq ($(mode), release)
    BUILD_DIR := $(BUILD_DIR)/release
    CFLAGS += $(RELEASE_CFLAGS)
else
ifeq ($(mode), debug)
    BUILD_DIR := $(BUILD_DIR)/debug
    CFLAGS += $(DEBUG_CFLAGS)
else
ifdef mode
    $(error mode must be set to release or debug)
else
ifeq ($(filter $(MAKECMDGOALS), build clean clean-tree format),)
    $(error mode must be specified)
endif
endif
endif
endif

# TODO
# Only include coverage flags only when debug and not tests
ifeq ($(mode), debug)
ifeq ($(filter $(MAKECMDGOALS), test),)
	CFLAGS += $(COVERAGE_CFLAGS)
endif
endif

.PHONY = all build clean clean-tree test

all:
	@for pkg in $(PACKAGES); do \
		$(MAKE) -C $$pkg -f $$pkg.mk $$pkg; \
	done

# Only include test goal if building locally. Unit tests on other targets are
# not presently supported.
ifndef target
    test:
	@for pkg in $(PACKAGES); do \
		$(MAKE) -C $$pkg -f $$pkg.mk $$pkg-test; \
	done
	@for pkg in $(PACKAGES); do \
		./$$pkg/$$pkg-test; \
	done
endif

# Build the embedded Linux OS with external tree.
build:
ifndef target
	$(error target must be specified)
else
ifeq ($(target), arietta)
	@mkdir -p $(OVERLAY_DIR)
	make BR2_EXTERNAL=$(shell pwd)/ext-tree sc_arietta_defconfig \
		-C $(BUILDROOT_DIR)
	make -C $(BUILDROOT_DIR)
else
ifeq ($(target), arietta-wifi)
	@mkdir -p $(OVERLAY_DIR)
	make BR2_EXTERNAL=$(shell pwd)/ext-tree sc_arietta-wifi_defconfig \
		-C $(BUILDROOT_DIR)
	make -C $(BUILDROOT_DIR)
endif
endif
endif

# Call the clean goal in each package makefile, remove the overlay directory,
# and remove the Google Test build directory.
clean: clean-tree
	@for pkg in $(PACKAGES); do \
		$(MAKE) -C $$pkg -f $$pkg.mk $$pkg-clean; \
	done

# Remove the overlay directory.
clean-tree:
	rm -rf $(OVERLAY_DIR)
